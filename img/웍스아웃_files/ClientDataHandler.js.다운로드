	/*************************************************************************************************************************
	 * Client Return Data Setting
	 *************************************************************************************************************************/
	document.write( "<script type=\"text/javascript\" src=\"" + KCP_NPAY_DOMAIN + "js/json2.js\" charset=\"EUC-KR\" ></script>" );
	document.write( "<div id='kcp_event_form'></div>" );
	/*************************************************************************************************************************/

	var SUCC_CD = "0000";
	
	try
	{
		/*************************************************
		 * KCP_SPAY_DOMAIN 을 인지하지 못하였을 경우 재 설정.
		 *************************************************/
		if( KCP_SPAY_DOMAIN == "" || typeof KCP_SPAY_DOMAIN == "undefined" )
		{
			if( KCP_NPAY_DOMAIN.indexOf("testnpay.kcp.co.kr") > -1 )
			{
				KCP_SPAY_DOMAIN = "https://testspay.kcp.co.kr";
			}
			else
			{
				KCP_SPAY_DOMAIN = "https://spay.kcp.co.kr";
			}
		}
	} 
	catch(e)
	{
		KCP_SPAY_DOMAIN = "https://spay.kcp.co.kr";
	}

	/************************************************************
	 * PostMessage Receive 데이터 사용 여부 검증
	 ***********************************************************/
	// Check available PostMessage
	function chkAvailablePostMessage() {

		if(typeof window.postMessage == "undefined")
		{
			return false;	// post message 미지원
		}
		else
		{
			return true;	// post.message 지원
		}
	}

	if(typeof window.addEventListener != "undefined") {
		window.addEventListener('message', receiveMessage, false);
	}
	else if(typeof window.attachEvent != "undefined") {
		window.attachEvent('onmessage', receiveMessage);
	}


	/*******************************************************
	 * [ 가맹점 Data Handling ( ReceiveMessage ) ]
	 * 가맹점 Data Handling
	 * @param e
	*******************************************************/
	function receiveMessage(e)
	{
		var res_cd 	= "9991";
		var kcpF	= KCP_JQUERY( "<form name='KCP_Auth_Hidden'></form>" );
		
		if( e.origin+"/" == KCP_NPAY_DOMAIN || e.origin+"/" == KCP_SPAY_DOMAIN )
		{
			/****************************
			 * 가맹점 페이지 데이터 셋팅
			 ****************************/
			if(e.data != null && e.data != "" && e.data != "undefined")
			{
				/******************************************************
				 *  PAYCO Direct 결제창일 경우, Iframe 창 Hidden 처리
				 ******************************************************/
				if( e.data == "kcpPaycoD" )
				{
					kcpHidePaycoIFrame();
					return false;
				}
				else if( e.data == "kcpShowPayment" )		// 다이렉트 사용불가일 경우, IFrame 창 Show 처리
				{
					kcpShowPaymentIFrame();
					return false;
				}
				else if( e.data == "kcpDirectPayment" )		// 다이렉트 결제창, IFrame Hidden 처리
				{
					kcpHidePaymentIFrame();
					return false;					
				}				
				else
				{
					var jsonRetData 	= KCP_JQUERY.parseJSON(e.data);
//					var kcpF			= KCP_JQUERY( "<form name='KCP_Auth_Hidden'></form>" );

					if( jsonRetData.kcpAlert != "undefined" && jsonRetData.kcpAlert != null && jsonRetData.kcpAlert != "" )
                    {
                        alert(jsonRetData.kcpAlert);
                        return false;
                    }
					
					KCP_JQUERY.each(jsonRetData, function(key, value) {
						kcpF.append( KCP_JQUERY( "<input name='" + key + "' value='" + decodeURI( value ) + "' type='hidden'>" ) );
					});
				}
			}
			else
			{
				res_cd = "9991";
				res_msg = "ReceiveMessage data is Empty";

				kcpF.append( KCP_JQUERY( "<input name='res_cd' 	value='" + res_cd + "' 	type='hidden'>" ) );
				kcpF.append( KCP_JQUERY( "<input name='res_msg' 	value='" + res_msg + "' 	type='hidden'>" ) );
			}

		    KCP_JQUERY( "#kcp_event_form" ).empty();
		    KCP_JQUERY( "#kcp_event_form" ).append( kcpF );

		    // 가맹점 Form 데이터 설정
			Completepayment( document.KCP_Auth_Hidden );
		}
		else
		{
			res_cd = "9992";
			res_msg = "KCP DOMAIN이 아닙니다.";

			kcpF.append( KCP_JQUERY( "<input name='res_cd' 	value='" + res_cd + "' 	type='hidden'>" ) );
			kcpF.append( KCP_JQUERY( "<input name='res_msg' 	value='" + res_msg + "' type='hidden'>" ) );

		    KCP_JQUERY( "#kcp_event_form" ).empty();
		    KCP_JQUERY( "#kcp_event_form" ).append( kcpF );
		}
	}


	/******************************************
	 * 가맹점 Fiend 에 데이터 설정. blockUI 제거
	 *
	 * @param frm_npay
	 ******************************************/
	function Completepayment(frm_npay)
	{
		GetField = GetField_NPAY;

	    if( typeof( m_Completepayment ) == "function" )
	    {
	    	m_Completepayment( frm_npay, closeEvent );
	    }
	    else
	    {
			if(typeof PARENT_FORM != "undefined")
			{
				PARENT_FORM.target = "_self";

				GetField_NPAY(PARENT_FORM, frm_npay);

				var res_cd = frm_npay.res_cd.value;

				if( res_cd == "0000" )
				{
					PARENT_FORM.submit();

					closeEvent();
				}
				else
				{
					closeEvent();
				}
			}
	    }
	}


	/********************************************************
	 * KCP 결제창에 전달될 form object 생성
	 * - web_hub.js or web_cross_hub.js 이용
	 *
	 * @param payForm
	 * @returns {Boolean}
	 ********************************************************/
	function makeFormEncodingEvent(payForm)
	{
	    try
	    {
	    	// 가맹점 Domain 정보 추출
	    	var KCP_OrderDomain = document.location.origin;

	    	// 가맹점 접속 브라우저 정보 추출
	    	var KCP_OrderBrw = checkUsrBrw();

	    	// 가맹점 접속 userAgent 추출
	    	var KCP_OrderUsrAgent	=	navigator.userAgent.toLowerCase();

	        var kcpF  = KCP_JQUERY( "<form name='KCP_Form_Hidden'></form>" );

	        KCP_JQUERY.each( KCP_JQUERY( payForm ).serializeArray(), function( i, field ) {
	            if( field.value != "" )
	            {
	            	kcpF.append( "<input name=\"" + field.name + "\" value=\"" + encodeURIComponent(field.value) + "\" type='hidden'>" );
	            }
	        });

	        // 가맹점 도메인 정보 form data 추가
	        kcpF.append( "<input name=\"kcp_order_domain\" value=\"" + encodeURIComponent(KCP_OrderDomain) + "\" type='hidden'>" );

	        // 가맹점 접속 브라우저 정보 추가
	        kcpF.append( "<input name=\"kcp_order_brw\" value=\"" + encodeURIComponent(KCP_OrderBrw) + "\" type='hidden'>" );

	        // 가맹점 접속 userAgent 추가
	        kcpF.append( "<input name=\"kcp_order_usrAgent\" value=\"" + encodeURIComponent(KCP_OrderUsrAgent) + "\" type='hidden'>" );

	        // 결제창 팝업 호출 시 Flag 추가
	        if( KCP_NAX_POPUP_FLAG )
	        {
	        	kcpF.append( "<input name=\"kcp_nax_popup\" value=\"P\" type='hidden'>" );
	        }

	        KCP_JQUERY( "#kcp_event_form" ).empty();
	        KCP_JQUERY( "#kcp_event_form" ).append( kcpF );
	    }
	    catch(e)
	    {
	        return false;
	    }

	    return true;
	}


	/*******************************************************
	 * [ 가맹점 Form에 응답 데이터 설정 ]
	 *
	 * 가맹점 Data Handling ( decodeURI 처리 )
	 * @param e
	*******************************************************/
	function GetField(m_frm, b){}

	function GetField_NPAY(m_frm, b)
	{
		var res_cd 	= "";
		var res_msg = "";
		
	    var nField  = m_frm.elements.length;

	    for(var idx = 0; idx < nField; idx++)
	    {
	        try
	        {
	            if( !!( eval( "b." + m_frm.elements[idx].name ) ) == true )
	            {
	                if( ( eval( "b." + m_frm.elements[idx].name ) ).value != "" )
	                {
	                    m_frm.elements[idx].value = (eval( "b." + m_frm.elements[idx].name )).value;
	                }
	            }
	        }
	        catch(e){}
	    }
	    
	    /****************************************
	     * IE10 이하 브라우저에서 
	     * 가맹점 form 데이터과 Kcp_Auth_Hidden form 데이터가
	     * 중복되어 가맺엄 form 데이터에 셋팅 못하는 이슈 방지.
	     ****************************************/
	    var chkBrw = checkUsrBrw();
	    
	    if( (chkBrw == "ie8" || chkBrw == "ie9" || chkBrw == "ie10") )
	    {
	    	KCP_JQUERY( "#kcp_event_form" ).empty();
	    }			    

	    return true;
	}


	/********************************************************
	 * 결제 팝업창 닫기
	 * - IFrame이 제거될 경우 IFrame의 unload 함수가 호출
	 * - 결제 팝업창 close() 처리
	 ********************************************************/
	function closeEvent()
	{
		if( KCP_ORDER_BRW == "firefox" && PARENT_FORM.res_cd.value == "3017" )
		{
			/**
			 * 	파이어폭스에서 팝업차단 시, 상단에 설정버튼이 바로 노출되는데
			 * 	blockUI를 제거할 경우 이 버튼도 같이 사라지기때문에 blockUI를 제거하지 않음
			 */
			return false;
		}
		else
		{
			if( KCP_JQUERY("#"+NAX_IFR_SRV) != "undefined" )
			{
				KCP_JQUERY("#"+NAX_IFR_SRV).remove();
			}

			KCP_JQUERY.unblockUI();
		}
	}


	/******************************************
	 * JSON Object 사용 여부 체크
	 * (ie8,9 일경우 postMessage로 전달 시
	 *  JSON Parsing 이 안됨)
	 *
	 * @returns {Boolean}
	 *****************************************/
	function checkUsableJSON()
	{
		var kcpPay_userAgent 	= navigator.userAgent.toLowerCase();

		if(checkUsrBrw().indexOf("ie") > -1)
		{
			if(detectIE(kcpPay_userAgent) < 10)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}


	/********************************************************
	 * 결제 팝업창 닫기
	 * @param handleValue : cancel - 결제 취소
	 ********************************************************/
	function closePayplusPopup()
	{
		if( KCP_JQUERY("#"+NAX_IFR_SRV) != "undefined" )
		{
			KCP_JQUERY("#"+NAX_IFR_SRV).remove();
		}

		KCP_JQUERY.unblockUI();
		PARENT_FORM.action = PARENT_ACTION;
	}


	/********************************************************
	 * Popup 결제창 focus check
	 ********************************************************/
	KCP_JQUERY(window).click(function(){
		try
		{
			checkPopupAlive();
		}
		catch(e)
		{
		}
	});


	/***********************************************************
	 * [ 가맹점 창에서 팝업이 활성화 되어 있는지 여부 확인]
	 ***********************************************************/
	function checkPopupAlive()
	{
		if( chkAvailablePostMessage() )
		{
			var paycoObj = "";
			var paycoIfr = "";
			var clientDN = document.location;

			if(NAX_IFR_POPUP != null || typeof NAX_IFR_POPUP != "undefined")
			{
				paycoObj = document.getElementById(NAX_IFR_POPUP);
			}

			if(paycoObj != null && typeof paycoObj != "undefined")
			{
				if(paycoObj.contentWindow) {
					paycoIfr = paycoObj.contentWindow;			// chrome, ff, new version IE
				}
				else if(paycoObj.contentDocument) {
					paycoIfr = paycoObj.contentDocument;		// old version IE
				}

				var chkData 		= new Object();
				chkData.clientDN	= window.location.hostname;

				try
				{
					paycoIfr.postMessage(JSON.parse(JSON.stringify(chkData)), KCP_NPAY_DOMAIN);
				}
				catch(err)
				{
				}
			}
		}
		else
		{
			alert("서비스 이용이 불가능한 브라우저 입니다.");
		}
	}


	/********************************************************
	 * [ 페이코 단축형 Resizing 처리 ]
	 ********************************************************/
	function kcpHidePaycoIFrame()
	{
		KCP_JQUERY("#NAX_BLOCK").css('width',			'0px');
		KCP_JQUERY("#NAX_BLOCK").css('height',			'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('width',		'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('height',	'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).css('border',		'0px');
	}
	
	
	/********************************************************
	 * [ 다이렉트 결제방식일 경우, 결제창 IFrame Hidden 처리 ]
	 ********************************************************/
	function kcpHidePaymentIFrame()
	{
		KCP_JQUERY("#NAX_BLOCK").css('width',			'0px');
		KCP_JQUERY("#NAX_BLOCK").css('height',			'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('width',		'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('height',	'0px');
		KCP_JQUERY("#" + NAX_IFR_SRV).css('border',		'0px');
	}
	

	/********************************************************
	 * [ 숨겨진 결제창 Show 처리 ]
	 ********************************************************/
	function kcpShowPaymentIFrame()
	{
		KCP_JQUERY("#NAX_BLOCK").css('width',			'760px');
		KCP_JQUERY("#NAX_BLOCK").css('height',			'570px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('width',		'760px');
		KCP_JQUERY("#" + NAX_IFR_SRV).attr('height',	'570px');
		KCP_JQUERY("#" + NAX_IFR_SRV).css('border',		'none');
	}	


	/********************************************************
	 * [ 페이코 단축형 일경우만 사용 ]
	 * - IE, FrieFox 에서 페이지 리로드시
	 * - 팝업창 닫기
	 *******************************************************/
	KCP_JQUERY(window).unload(function(){
		try
		{
			if(KCP_PAYCO_POP != null )
			{
				KCP_PAYCO_POP.close();
				closePayplusPopup();
			}
			else if ( KCP_NAX_POP != null )
			{
				KCP_NAX_POP.close();
				closePayplusPopup();
			}
		}
		catch(e){}
	});


	var KCP_Base64 = {
		    // private property
		    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

		    // public method for encoding
		    encode : function (input) {
		        var output = "";
		        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		        var i = 0;

		        input = KCP_Base64._utf8_encode(input);

		        while (i < input.length) {

		            chr1 = input.charCodeAt(i++);
		            chr2 = input.charCodeAt(i++);
		            chr3 = input.charCodeAt(i++);

		            enc1 = chr1 >> 2;
		            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		            enc4 = chr3 & 63;

		            if (isNaN(chr2)) {
		                enc3 = enc4 = 64;
		            } else if (isNaN(chr3)) {
		                enc4 = 64;
		            }

		            output = output +
		            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
		            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		        }

		        return output;
		    },

		    // public method for decoding
		    decode : function (input) {
		        var output = "";
		        var chr1, chr2, chr3;
		        var enc1, enc2, enc3, enc4;
		        var i = 0;

		        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		        while (i < input.length) {

		            enc1 = this._keyStr.indexOf(input.charAt(i++));
		            enc2 = this._keyStr.indexOf(input.charAt(i++));
		            enc3 = this._keyStr.indexOf(input.charAt(i++));
		            enc4 = this._keyStr.indexOf(input.charAt(i++));

		            chr1 = (enc1 << 2) | (enc2 >> 4);
		            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		            chr3 = ((enc3 & 3) << 6) | enc4;

		            output = output + String.fromCharCode(chr1);

		            if (enc3 != 64) {
		                output = output + String.fromCharCode(chr2);
		            }
		            if (enc4 != 64) {
		                output = output + String.fromCharCode(chr3);
		            }

		        }

		        output = KCP_Base64._utf8_decode(output);

		        return output;

		    },

		    // private method for UTF-8 encoding
		    _utf8_encode : function (string) {
		        string = string.replace(/\r\n/g,"\n");
		        var utftext = "";

		        for (var n = 0; n < string.length; n++) {

		            var c = string.charCodeAt(n);

		            if (c < 128) {
		                utftext += String.fromCharCode(c);
		            }
		            else if((c > 127) && (c < 2048)) {
		                utftext += String.fromCharCode((c >> 6) | 192);
		                utftext += String.fromCharCode((c & 63) | 128);
		            }
		            else {
		                utftext += String.fromCharCode((c >> 12) | 224);
		                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
		                utftext += String.fromCharCode((c & 63) | 128);
		            }

		        }

		        return utftext;
		    },

		    // private method for UTF-8 decoding
		    _utf8_decode : function (utftext) {
		        var string = "";
		        var i = 0;
		        var c = c1 = c2 = 0;

		        while ( i < utftext.length ) {

		            c = utftext.charCodeAt(i);

		            if (c < 128) {
		                string += String.fromCharCode(c);
		                i++;
		            }
		            else if((c > 191) && (c < 224)) {
		                c2 = utftext.charCodeAt(i+1);
		                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
		                i += 2;
		            }
		            else {
		                c2 = utftext.charCodeAt(i+1);
		                c3 = utftext.charCodeAt(i+2);
		                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
		                i += 3;
		            }

		        }

		        return string;
		    }

		}
		/*********************************************************************************************************************/
